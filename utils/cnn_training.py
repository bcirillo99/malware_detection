import numpy as np
import torch

def train_model(model, phase, criterion, optimizer, device, dataloaders,  loss_arr, acc_arr, verbose=1):
    model=model.to(device)
    criterion=criterion.to(device)
    if phase == 'train':
        model.train()
    elif phase == 'validation':
        model.eval()
    count = 0
    
    for inputs, labels in dataloaders:
        print("Compute batch {:d}/{:d}=>".format(count,len(dataloaders)), end="")
        inputs = inputs.to(device)
        labels = labels.to(device)
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        if phase == 'train':
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
        count+=1
        labels=labels.detach().cpu().numpy().astype(int)
        outputs=outputs.detach().cpu().numpy()
        
        acc_arr.extend(list(labels)==np.around(outputs).astype(int))
        loss_arr.append(loss.detach().cpu().numpy())
        if verbose==1:
            print(f"{phase}_loss: {np.mean(loss_arr)}, {phase}_acc: {np.mean(acc_arr)}")
    return loss_arr, acc_arr
