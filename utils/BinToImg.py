from PIL import Image
import numpy as np
import torch.nn as nn

class BinToImg(nn.Module):
    def __init__(self, shape=(224, 224)):
        super().__init__()
        self.shape = shape

    def __get_image_width(self,file_size):
        kb = 1024
        if file_size < 10 * kb:
            return 32
        elif file_size < 30 * kb:
            return 64
        elif file_size < 60 * kb:
            return 128
        elif file_size < 100 * kb:
            return 256
        elif file_size < 200 * kb:
            return 384
        elif file_size < 500 * kb:
            return 512
        elif file_size < 1000 * kb:
            return 768
        return 1024

    def forward(self, x):
        size = len(x)
        image_width = self.__get_image_width(file_size=size)
        image_height = int(size / image_width)
        image_size = image_width * image_height
        bytes_image = np.uint8(np.reshape((x[:image_size]), (image_height, image_width)))
        image = Image.fromarray(bytes_image)
        image = image.resize(self.shape)
        return image