# AI for cyber security 2022/23
# Authors:
# - Cirillo Benedetto 
# - Montervino Dario 
# - Salzano Simone
# - Tisi Andrea

import torch.nn as nn
import torch.optim as optim
from torchvision import  transforms
# from torchsummary import summary #network summary

# imported by us
from argparse import ArgumentParser
from model.MalConv import MalConv
from utils import cnn_training



def main():
  #---------------------------------- DEFINITION OF THE CLASSES ----------------------------------------
  parser = ArgumentParser()
  parser.add_argument('--batch_size', help='The batch size', type=int, default=256)
  parser.add_argument('--model_save_path', help='Folder where the model will be saved', type=str, default=None)
  parser.add_argument('--model_eval_path', help='Folder where the model will be taken for evaulate it', type=str, default=None)
  parser.add_argument('--perc_validation', help='Percentage of the validation set compared to the total dataset used for training', type=float, default=0.3)
  parser.add_argument('--n_epochs', help='Number of epochs in the training phase', type=int, default=50)
  parser.add_argument('--early_stopping', help='Max number of epochs without an improvement on the validation_accuracy', type=int, default=0)
  parser.add_argument('--file_dim', help='Max dim of the input file for the model (in MB)', type=int, default=2)
  parser.add_argument('--verbose', help='Show the progress during the training phase', type=int, default=1)
  parser.add_argument('--dataset_path', help='Dataset Tar Location (no GZ compression)', type=str, default=None)
  args = parser.parse_args()
  print("\nModel paramteres:\n")
  print("Batch size: ",args.batch_size)
  print("Folder where the model will be saved: ",args.model_save_path)
  print("Folder where the model will be taken: ",args.model_eval_path)
  print("Percentage of the validation set compared to the total dataset used for training: ",args.perc_validation)
  print("Number of epochs in the training phase: ",args.n_epochs)
  if args.file_dim==2:
    file_dim=2**21
    print("Model: MalConv (file dim of ",file_dim," byte)")
  else:
    file_dim=2**20
    print("Model: emberMalConv (file dim of ",file_dim," byte)")
  print("Verbose: ", args.verbose==1)
  print("\n")

  #---------------------------------- PREPARATION OF THE DATASET ----------------------------------------
  dataloader=cnn_training.get_loaders_from_tar(args.dataset_path, file_dim, args.batch_size, args.perc_validation, padding=True, verbose=True)

  #---------------------------------- PREPARATION OF THE MODEL ----------------------------------------
  model=MalConv(input_length=file_dim)
  n_epochs = args.n_epochs
  criterion =nn.BCELoss()
  optimizer = optim.Adam(model.parameters())
  # Selecting the device 
  device=cnn_training.get_device()
  # print("Is the model on the GPU? ",next(MalConv_net.parameters()).is_mps or torch.cuda.is_available())

  #---------------------------------- TRAINING PHASE ----------------------------------------
  cnn_training.train_model(model, criterion, optimizer, device, dataloader,args.n_epochs,  args.model_save_path, early_stopping=5 )


if __name__ == '__main__':
  main()