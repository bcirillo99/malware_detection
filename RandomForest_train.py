from argparse import ArgumentParser
from utils import ForestDataset
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import numpy as np
import pickle

TRAIN_SIZE = 0.7 
SAMPLE_SPLIT = 2 
MAX_FEATURES = "sqrt" 
NUM_ESTIMATORS = 100 
MAX_DEPTH = 3
LEARNING_RATE = 1

if __name__=='__main__':
     
     parser = ArgumentParser()
     parser.add_argument('--input_size',help='Size of the input to the random forest',type=int, default=2000000)
     parser.add_argument('--dataset_path', help='Dataset Tar Location (no GZ compression)', type=str, default=None)
     parser.add_argument('--save_model_path', help='Path to which the model is saved',type=str, default=None)
     args = parser.parse_args()
     # Data loading
     X, y = ForestDataset.load_forest_dataset(args.dataset_path,args.input_size,set="train")
     print(X)

     # Creating a random forest
     rf=RandomForestClassifier(n_estimators=NUM_ESTIMATORS, max_depth=MAX_DEPTH, max_features=MAX_FEATURES, min_samples_split=SAMPLE_SPLIT)
     # Training the forest
     classifier=rf.fit(X,y)

     del X, y
     # Testing
     X_test, y_test = ForestDataset.load_forest_dataset(args.dataset_path, args.input_size, set="test")
     y_pred = classifier.predict(X_test)

     print("%d exact prediction over %d samples"
          % ((y_test == y_pred).sum(), X_test.shape[0]))
     print("Normalized confusion matrix \n %s" % (confusion_matrix(y_test, y_pred, normalize='true')))
     print("Classification report\n %s" % (classification_report(y_test, y_pred)))
     print("Accuracy score: %.3f" % (accuracy_score(y_test, y_pred)))
     
with open(args.save_model_path, 'wb') as handle:
     pickle.dump(rf,handle)
     
