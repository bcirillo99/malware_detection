
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import DataLoader, random_split
from torchvision import datasets, models, transforms
# from torchsummary import summary #network summary

# imported by us
import os
from torch.utils.data import Dataset
from argparse import ArgumentParser
import time
from model.MalConv import MalConv
from utils.MalDataset import MalDataset
import tarfile


def compute_class_accuracy(output, labels):
    output=output.detach().cpu().numpy()
    labels=labels.detach().cpu().numpy()
    class0_acc=[]
    class1_acc=[]
    for i in range(0, len(output)):
        if(labels[i][0]==1):
            if(labels[i][0]==round(output[i][0])):
                class1_acc.append(1)
            else:
                class1_acc.append(0)
        if(labels[i][0]==10):
            if(labels[i][0]==round(output[i][0])):
                class0_acc.append(1)
            else:
                class0_acc.append(0)
    print("Class 0 accuracy: {:.3f}, Class 1 accuracy: {:.3f}".format(np.mean(class0_acc), np.mean(class1_acc)))
