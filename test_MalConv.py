from argparse import ArgumentParser
from utils import cnn_training
import torch
import numpy as np
def main():
  #---------------------------------- DEFINITION OF THE CLASSES ----------------------------------------
  parser = ArgumentParser()
  parser.add_argument('--batch_size', help='The batch size', type=int, default=256)
  parser.add_argument('--model_eval_path', help='Folder where the model will be taken for evaulate it', type=str, default=None)
  parser.add_argument('--file_dim', help='Max dim of the input file for the model (in MB)', type=int, default=2)
  parser.add_argument('--verbose', help='Show the progress during the training phase', type=int, default=1)
  parser.add_argument('--dataset_path', help='Dataset Tar Location (no GZ compression)', type=str, default=None)
  args = parser.parse_args()
  print("\nModel paramteres:\n")
  print("Batch size: ",args.batch_size)
  print("Folder where the model will be taken: ",args.model_eval_path)
  if args.file_dim==2:
    file_dim=2**21
    print("Model: MalConv (file dim of ",file_dim," byte)")
  else:
    file_dim=2**20
    print("Model: emberMalConv (file dim of ",file_dim," byte)")
  print("Verbose: ", args.verbose==1)
  print("\n")


  test_loader = cnn_training.get_loader_from_tar(args.dataset_path, 'test', file_dim, args.batch_size,  padding=True, verbose=True) 

  model = torch.load(args.model_eval_path)
  device=cnn_training.get_device()
  criterion = torch.nn.BCELoss()

  
  loss_list, acc_list = cnn_training.model_evaluate(model, test_loader, device, criterion)
  print(f"Test_loss: {str(round(np.mean(loss_list),3))}\t Test_acc: {str(round(np.mean(acc_list),3))}")



if __name__ == '__main__':
  main()