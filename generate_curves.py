import os
import pickle
from argparse import ArgumentParser
import matplotlib.pyplot as plt

pops = [10, 20, 30, 40, 50]
iterations = [10, 25, 50, 100, 150, 200]
pens = [1E-03, 5E-03, 1E-02, 5E-02, 1E-01, 5E-01]
randomforest = {
    'pop': [],
    'iterations': [],
    'pen': []
}
malconv = {
    'pop': [],
    'iterations': [],
    'pen': []
}
imagebased = {
    'pop': [],
    'iterations': [],
    'pen': []
}


parser = ArgumentParser()
parser.add_argument('--adv_folder', help='folder where the adversarial archives are stored', type=str)
parser.add_argument('--model_folder', help='folder where the models to evaluate are stored', type=str)
parser.add_argument('--metrics_folder', help='folder where the evaluated metrics are stored', type=str)

args = parser.parse_args()
def main(args):
    for iteration in iterations:

        os.system(
            f"python run_malconv.py --file_dim 1 --dataset_path {args.adv_folder}/{iteration}.tar --model_eval_path {args.model_folder}/malconv.pt --eval_set adversarial --metrics_folder {args.metrics_folder}  ")
        with open(f"{args.metrics_folder}/malconv/adversarial_accuracy_score.pkl", 'rb') as fh:
            accuracy = pickle.load(fh)
            malconv['iterations'].append(accuracy)

        os.system(
            f"python run_imagebased.py --file_dim 1 --dataset_path {args.adv_folder}/{iteration}.tar --model_eval_path {args.model_folder}/imagebased.pt --eval_set adversarial --metrics_folder {args.metrics_folder}  ")
        with open(f"{args.metrics_folder}/imagebased/adversarial_accuracy_score.pkl", 'rb') as fh:
            accuracy = pickle.load(fh)
            imagebased['iterations'].append(accuracy)

        os.system(
            f"python run_randomforest.py --test_path {args.adv_folder}/{iteration}.csv --model_save_path {args.model_folder}/randomforest.model --metrics_folder {args.metrics_folder}  ")
        with open(f"{args.metrics_folder}/randomforest/adversarial_accuracy_score.pkl", 'rb') as fh:
            accuracy = pickle.load(fh)
            randomforest['iterations'].append(accuracy)

    plt.plot(iterations, malconv['iterations'], marker='o')
    plt.xlabel('Iterations')
    plt.ylabel('Accuracy')
    plt.xlim([0,220])
    plt.ylim([0.0,1.1])
    plt.title('Malconv Security Evaluation Curve (varying GAMMA Iterations)')
    plt.savefig(f"{args.metrics_folder}/malconv/SEC_iterations.png")
    plt.close()

    plt.plot(iterations, imagebased['iterations'], marker='o')
    plt.xlabel('Iterations')
    plt.ylabel('Accuracy')
    plt.xlim([0,220])
    plt.ylim([0.0,1.1])
    plt.title('Image Based Security Evaluation Curve (varying GAMMA Iterations)')
    plt.savefig(f"{args.metrics_folder}/imagebased/SEC_iterations.png")
    plt.close()

    plt.plot(iterations, randomforest['iterations'], marker='o')
    plt.xlabel('Iterations')
    plt.ylabel('Accuracy')
    plt.xlim([0,220])
    plt.ylim([0.0,1.1])
    plt.title('Random Forest Security Evaluation Curve (varying GAMMA Iterations)')
    plt.savefig(f"{args.metrics_folder}/randomforest/SEC_iterations.png")
    plt.close()
    
    plt.plot(iterations, malconv['iterations'], marker='o')
    plt.xlabel('Iterations')
    plt.ylabel('Accuracy')
    plt.xlim([0, 220])
    plt.plot(iterations, imagebased['iterations'], marker='o')
    plt.plot(iterations, randomforest['iterations'], marker='o')
    plt.ylim([0.0,1.1])
    plt.title('Combined Security Evaluation Curve (varying GAMMA Iterations)')
    plt.savefig(f"{args.metrics_folder}/combined_iterations.png")
    plt.close()


    for pop in pops:

        os.system(
            f"python run_malconv.py --file_dim 1 --dataset_path {args.adv_folder}/pop{pop}.tar --model_eval_path {args.model_folder}/malconv.pt --eval_set adversarial --metrics_folder {args.metrics_folder}  ")
        with open(f"{args.metrics_folder}/malconv/adversarial_accuracy_score.pkl", 'rb') as fh:
            accuracy = pickle.load(fh)
            malconv['pop'].append(accuracy)

        os.system(
            f"python run_imagebased.py --file_dim 1 --dataset_path {args.adv_folder}/pop{pop}.tar --model_eval_path {args.model_folder}/imagebased.pt --eval_set adversarial --metrics_folder {args.metrics_folder}  ")
        with open(f"{args.metrics_folder}/imagebased/adversarial_accuracy_score.pkl", 'rb') as fh:
            accuracy = pickle.load(fh)
            imagebased['pop'].append(accuracy)
            
        os.system(
            f"python run_randomforest.py --test_path {args.adv_folder}/pop{pop}.csv --model_save_path {args.model_folder}/randomforest.model --metrics_folder {args.metrics_folder}  ")
        with open(f"{args.metrics_folder}/randomforest/adversarial_accuracy_score.pkl", 'rb') as fh:
            accuracy = pickle.load(fh)
            randomforest['pop'].append(accuracy)

    plt.plot(pops, malconv['pop'], marker='o')
    plt.xlabel('Population')
    plt.ylabel('Accuracy')
    plt.xlim([7,53])
    plt.ylim([0.0,1.1])
    plt.title('Malconv Security Evaluation Curve (varying GAMMA Population)')
    plt.savefig(f"{args.metrics_folder}/malconv/SEC_population.png")
    plt.close()
    

    plt.plot(pops, imagebased['pop'], marker='o')
    plt.xlabel('Population')
    plt.ylabel('Accuracy')
    plt.xlim([7,53])
    plt.ylim([0.0,1.1])
    plt.title('Image Based Security Evaluation Curve (varying GAMMA Population)')
    plt.savefig(f"{args.metrics_folder}/imagebased/SEC_population.png")
    plt.close()
    

    plt.plot(pops, randomforest['pop'], marker='o')
    plt.xlabel('Population')
    plt.ylabel('Accuracy')
    plt.xlim([7,53])
    plt.ylim([0.0,1.1])
    plt.title('Random Forest Security Evaluation Curve (varying GAMMA Population)')
    plt.savefig(f"{args.metrics_folder}/randomforest/SEC_population.png")
    plt.close()
    
    plt.plot(pops, malconv['pop'], marker='o')
    plt.xlabel('Population')
    plt.ylabel('Accuracy')
    plt.xlim([7, 53])
    plt.ylim([0.0, 1.1])
    plt.title('Combined Security Evaluation Curve (varying GAMMA Population)')
    plt.plot(pops, imagebased['pop'], marker='o')
    plt.plot(pops, randomforest['pop'], marker='o')
    plt.savefig(f"{args.metrics_folder}/combined_population.png")
    plt.close()

    for pen in pens:

        os.system(
            f"python run_malconv.py --file_dim 1 --dataset_path {args.adv_folder}/pen{pen:.0E}.tar --model_eval_path {args.model_folder}/malconv.pt --eval_set adversarial --metrics_folder {args.metrics_folder}  ")
        with open(f"{args.metrics_folder}/malconv/adversarial_accuracy_score.pkl", 'rb') as fh:
            accuracy = pickle.load(fh)
            malconv['pen'].append(accuracy)

        os.system(
            f"python run_imagebased.py --file_dim 1 --dataset_path {args.adv_folder}/pen{pen:.0E}.tar --model_eval_path {args.model_folder}/imagebased.pt --eval_set adversarial --metrics_folder {args.metrics_folder}  ")
        with open(f"{args.metrics_folder}/imagebased/adversarial_accuracy_score.pkl", 'rb') as fh:
            accuracy = pickle.load(fh)
            imagebased['pen'].append(accuracy)
            
        os.system(
            f"python run_randomforest.py --test_path {args.adv_folder}/pen{pen:.0E}.csv --model_save_path {args.model_folder}/randomforest.model --metrics_folder {args.metrics_folder}  ")
        with open(f"{args.metrics_folder}/randomforest/adversarial_accuracy_score.pkl", 'rb') as fh:
            accuracy = pickle.load(fh)
            randomforest['pen'].append(accuracy)

    plt.plot(pens, malconv['pen'], marker='o')
    plt.xlabel('Penalty Regularizer')
    plt.ylabel('Accuracy')
    plt.xscale('log')
    plt.ylim([0.0,1.1])
    plt.title('Malconv Security Evaluation Curve (varying GAMMA Penalty Regularizer)')
    plt.savefig(f"{args.metrics_folder}/malconv/SEC_penalty.png")
    plt.close()
    

    plt.plot(pens, imagebased['pen'], marker='o')
    plt.xlabel('Penalty Regularizer')
    plt.ylabel('Accuracy')
    plt.xscale('log')
    plt.ylim([0.0,1.1])
    plt.title('Image Based Security Evaluation Curve (varying GAMMA Penalty Regularizer)')
    plt.savefig(f"{args.metrics_folder}/imagebased/SEC_penalty.png")
    plt.close()
    
    plt.plot(pens, randomforest['pen'], marker='o')
    plt.xlabel('Penalty Regularizer')
    plt.ylabel('Accuracy')
    plt.xscale('log')
    plt.ylim([0.0,1.1])
    plt.title('Random Forest Security Evaluation Curve (varying GAMMA Penalty Regularizer)')
    plt.savefig(f"{args.metrics_folder}/randomforest/SEC_penalty.png")
    plt.close()
    
    plt.plot(pens, malconv['pen'], marker='o')
    plt.xlabel('Penalty Regularizer')
    plt.ylabel('Accuracy')
    plt.xscale('log')
    plt.ylim([0.0,1.1])
    plt.plot(pens, imagebased['pen'], marker='o')
    plt.plot(pens, randomforest['pen'], marker='o')
    plt.title('Combined Security Evaluation Curve (varying GAMMA Penalty Regularizer)')
    plt.savefig(f"{args.metrics_folder}/combined_penalty.png")
    plt.close()
    
if __name__=='__main__':
    main(args)